# docker-compose.yml
version: '3.8'

services:
  app:
    hostname: frontend-host
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./apps/frontend_v3/Dockerfile.local
    volumes:
       - ./apps/frontend_v3:/app
       - /app/node_modules
       - /app/.next
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8001
    networks:
      - pbf-network
    depends_on:
      - postgres
      - database-service

  database-service:
    hostname: database-service-host
    build:
      context: .
      dockerfile: ./apps/database-service/Dockerfile.local
    networks:
      - pbf-network
    restart: on-failure
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/db_apotek
      - NODE_ENV=development
      - PORT=3004
    ports:
      - "3004:3004"
    volumes:
      - ./apps/database-service:/app/apps/database-service
      - database-service-node-modules:/app/apps/database-service/node_modules

  user-service:
    hostname: user-service-host
    build:
      context: .
      dockerfile: ./apps/user-service/Dockerfile.local
    networks:
      - pbf-network
    restart: on-failure
    volumes:
      - ./apps/user-service:/app/apps/user-service
      - database-service-node-modules:/app/apps/database-service/node_modules:ro
    depends_on:
      - postgres
      - database-service
    environment:
      - APP_NAME=user-rest-service
      - PORT=3006
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/db_apotek
      - API_AUTH_URL=http://auth-service-host:3007/api/auth
      - NODE_ENV=development
      - JWT_SECRET_KEY=JWT_SECRET_KEY_APP_APOTEK_PBF))(**
    ports:
      - "3006:3006"
    command: npm run dev

  auth-service:
    hostname: auth-service-host
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile.local
    networks:
      - pbf-network
    restart: on-failure
    volumes:
      - ./apps/auth-service:/app/apps/auth-service
      - database-service-node-modules:/app/apps/database-service/node_modules:ro
    depends_on:
      - postgres
      - redis
      - user-service
      - database-service
    environment:
      - APP_NAME=auth-rest-service
      - PORT=3007
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/db_apotek
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - JWT_SECRET_KEY=JWT_SECRET_KEY_APP_APOTEK_PBF))(**
      - NODE_ENV=development
      - API_USER_URL=http://user-service-host:3006/api/users
    ports:
      - "3007:3007"
    command: npm run dev
  
  sales-service:
    hostname: sales-service-host
    build:
      context: .
      dockerfile: ./apps/sales-service/Dockerfile.local
    networks:
      - pbf-network
    restart: on-failure
    volumes:
      - ./apps/sales-service:/app/apps/sales-service
      - database-service-node-modules:/app/apps/database-service/node_modules:ro
    depends_on:
      - postgres
      - user-service
      - database-service
    environment:
      - PORT=3005
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/db_apotek
      - NODE_ENV=development
      - API_USER_URL=http://user-service-host:3006/api/users
      - API_AUTH_URL=http://auth-service-host:3007/api/auth
      - JWT_SECRET_KEY=JWT_SECRET_KEY_APP_APOTEK_PBF))(**
    ports:
      - "3005:3005"
    command: npm run dev

  # inventory-service-pembelian:
  #   hostname: inventory-service-pembelian-host
  #   build:
  #     context: .
  #     dockerfile: ./apps/inventory-service-pembelian/Dockerfile.local
  #   networks:
  #     - pbf-network
  #   restart: on-failure
  #   ports:
  #     - "3003:3003"
  #   depends_on:
  #     - postgres
  #   environment:
  #     - PORT=3003
  #     - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/db_inventory_pembelian?schema=public


  postgres:
    image: postgres:latest
    container_name: postgresql
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: db_apotek
    volumes:
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d/
      - postgres-data:/var/lib/postgresql/data
    networks:
      - pbf-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - pbf-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  reverse-proxy:
    build:
      context: .
      dockerfile: ./infra/reverse-proxy/Dockerfile
    restart: on-failure
    volumes:
      - "/run/docker.sock:/run/run/docker.sock:ro"
    networks:
      - pbf-network
    ports:
      - '8001:80'
    depends_on:
      - app
      - user-service
      - auth-service
      - sales-service

networks:
    pbf-network:
      driver: bridge

volumes:
    postgres-data:
    database-service-node-modules: