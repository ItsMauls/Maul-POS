datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "windows"]
}

// ============= AUTH & USER MANAGEMENT =============
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  phone_number String?  @unique
  username     String   @unique
  firstName    String?
  lastName     String?
  password     String
  role         Role     @default(USER)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  profile      Profile?

  @@map("user")
}

model Profile {
  id        String   @id @default(uuid())
  bio       String?
  avatar    String?
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profile")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

// ============= MASTER DATA =============
model MKategori {
  id_kategori Int      @id @default(autoincrement())
  nm_kategori String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  mainStocks TMainStock[]
  rackPusdis MRackPusdis[]

  @@map("mkategori")
}

model MSatuan {
  id_satuan  Int      @id @default(autoincrement())
  nm_satuan  String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  mainStocks TMainStock[]

  @@map("msatuan")
}

model ReturPenjualan {
  id                  Int        @id @default(autoincrement())
  transaksi           Transaksi  @relation(fields: [id_transaksi], references: [id])
  id_transaksi        Int
  mainstock           TMainStock @relation(fields: [kd_brgdg], references: [kd_brgdg])
  kd_brgdg            Int
  detail              String?
  qty                 Int
  harga               Decimal    @db.Decimal(10, 2)
  discount            Decimal    @db.Decimal(10, 2)
  ppn                 Decimal    @db.Decimal(10, 2)
  subtotal_harga      Decimal    @db.Decimal(12, 2)
  subtotal_discount   Decimal    @db.Decimal(12, 2)
  subtotal_ppn        Decimal    @db.Decimal(12, 2)
  no_batch            String?
  tgl_batch           DateTime?
  id_hretur_cabang    Int?
  detail_retur_cabang String?
  status_retur        String?
  nominal_retur       Decimal?   @db.Decimal(12, 2)
  hpp                 Decimal    @db.Decimal(10, 2)
  total_hpp           Decimal    @db.Decimal(12, 2)
  wso2transfer        Boolean
  id_htransb          Int
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt

  @@map("retur_penjualan")
}

model MCabang {
  kd_cab            String    @id
  nm_cab            String    @db.VarChar(100)
  alamat            String?   @db.Text
  no_telepon        String?   @db.VarChar(20)
  no_hp             String?   @db.VarChar(20)
  email             String?   @db.VarChar(100)
  created_at        DateTime  @default(now())
  deleted_status    Boolean   @default(false)
  deleted_at        DateTime?
  id_tipe_cabang    Int?
  id_area           Int?
  shift             Int?
  id_instansi       Int?
  bpjs              Boolean   @default(false)
  status_connection Boolean   @default(true)
  offline           Boolean   @default(false)
  proses            Boolean   @default(false)
  tanggal_update    DateTime? @db.Date
  time_off          DateTime? @db.Time()

  mainStocks TMainStock[]
  Transaksi  Transaksi[]
  Antrian    Antrian[]
  kassa      MKassa[]

  @@map("mcabang")
}

model MPabrik {
  id              Int       @id @default(autoincrement())
  nm_pabrik       String
  alamat          String?   @db.Text
  no_telepon      String?   @db.VarChar(20)
  email           String?   @db.VarChar(100)
  no_npwp         String?   @db.VarChar(50)
  nm_npwp         String?
  alamat_npwp     String?   @db.Text
  created_at      DateTime  @default(now())
  deleted_status  Boolean   @default(false)
  deleted_at      DateTime?
  min_bulan_ed    Int?
  informasi_retur String?   @db.Text
  prf_telp        String?   @db.VarChar(20)

  mainStocks TMainStock[]

  @@map("mpabrik")
}

model MKLProduk {
  id_kl      Int      @id @default(autoincrement())
  nm_kl      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  mainStocks TMainStock[]

  @@map("mkl_produk")
}

model MRackPusdis {
  id_dept_pusdis Int       @id @default(autoincrement())
  nm_dept        String
  id_kategori    Int?
  parent_id      Int?
  created_at     DateTime  @default(now())
  created_by     String?
  updated_at     DateTime  @updatedAt
  updated_by     String?
  deleted_at     DateTime?
  deleted_by     String?
  is_deleted     Boolean   @default(false)
  nm_kategori    String?

  parent     MRackPusdis?  @relation("RackPusdisToRackPusdis", fields: [parent_id], references: [id_dept_pusdis])
  children   MRackPusdis[] @relation("RackPusdisToRackPusdis")
  kategori   MKategori?    @relation(fields: [id_kategori], references: [id_kategori])
  mainStocks TMainStock[]

  @@map("mrack_pusdis")
}

// ============= INVENTORY & STOCK =============
model TMainStock {
  kd_brgdg                Int       @id @default(autoincrement())
  nm_brgdg                String
  id_dept                 Int?
  isi                     Int?
  id_satuan               Int?
  strip                   Int
  mark_up                 Float?
  hb_netto                Float?
  hb_gross                Float?
  hj_ecer                 Float?
  hj_bbs                  Float?
  id_kategori             Int?
  id_pabrik               Int?
  barcode                 String?
  created_at              DateTime  @default(now())
  created_by              String?
  deleted_status          Boolean   @default(false)
  deleted_at              DateTime?
  hpp                     Float?
  q_bbs                   Int?
  tgl_new_product         DateTime?
  konsinyasi              Boolean?
  halodoc                 Boolean?
  bpjs                    Boolean?
  informasi_po            String?
  informasi_tanggal_ed_po DateTime?
  aturan_pakai            String?
  komposisi               String?
  indikasi                String?
  dosis                   String?
  trading_term            String?
  id_kl                   Int?
  status                  Int?
  moq                     Int?
  min_bulan_ed            Int?
  informasi_return        String?
  barcode_big             String?
  hb_net                  Float?
  mark_up_purchasing      Float?
  hna                     Float?
  hj_masiva               Float?
  sup1                    String?
  q_temp_out              Int?
  q_exp                   Int?
  disc1                   Float?
  q_akhir                 Int?
  produksi                String?
  het                     Float?
  berat                   Float?
  nie                     String?
  tgl_berlaku_nie         DateTime?
  file_nie                String?
  updated_at              DateTime?
  updated_by              String?
  id_brand                Int?
  deskripsi               String?
  wso2transfer            Boolean?
  is_updated              Boolean?
  kd_cab                  String
  id_dept_pusdis          Int?

  kategori        MKategori?        @relation(fields: [id_kategori], references: [id_kategori])
  cabang          MCabang           @relation(fields: [kd_cab], references: [kd_cab])
  satuan          MSatuan?          @relation(fields: [id_satuan], references: [id_satuan])
  pabrik          MPabrik?          @relation(fields: [id_pabrik], references: [id])
  kl_produk       MKLProduk?        @relation(fields: [id_kl], references: [id_kl])
  rack_pusdis     MRackPusdis?      @relation(fields: [id_dept_pusdis], references: [id_dept_pusdis])
  TransaksiDetail TransaksiDetail[]
  promos          Promo[]           @relation("MainStockToPromo")
  ReturPenjualan  ReturPenjualan[]

  @@map("tmainstock")
}

// ============= TRANSACTION & SALES =============
model Transaksi {
  id                 Int      @id @default(autoincrement())
  id_pelanggan       Int
  id_dokter          Int
  kd_cab             String
  sales_pelayan      String
  jenis_penjualan    String
  invoice_eksternal  String?
  catatan            String?
  total_harga        Decimal  @db.Decimal(12, 2)
  total_disc         Decimal  @db.Decimal(12, 2)
  total_sc_misc      Decimal  @db.Decimal(12, 2)
  total_promo        Decimal  @db.Decimal(12, 2)
  total_up           Decimal  @db.Decimal(12, 2)
  no_voucher         String?
  interval_transaksi Int?
  buffer_transaksi   Int?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  receipt            String?

  pelanggan       Pelanggan         @relation(fields: [id_pelanggan], references: [id])
  dokter          Dokter            @relation(fields: [id_dokter], references: [id])
  cabang          MCabang           @relation(fields: [kd_cab], references: [kd_cab])
  TransaksiDetail TransaksiDetail[]
  antrian         Antrian[]
  ReturPenjualan  ReturPenjualan[]

  @@map("transaksi")
}

model TransaksiDetail {
  id           Int      @id @default(autoincrement())
  id_transaksi Int
  kd_brgdg     Int
  jenis        String // R(resep) atau RC(racikan)
  harga        Decimal  @db.Decimal(10, 2)
  qty          Int
  subjumlah    Decimal  @db.Decimal(12, 2)
  disc         Decimal  @db.Decimal(10, 2)
  sc_misc      Decimal  @db.Decimal(10, 2)
  promo        Decimal  @db.Decimal(10, 2)
  disc_promo   Decimal  @db.Decimal(10, 2)
  up           Decimal  @db.Decimal(10, 2)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  transaksi Transaksi  @relation(fields: [id_transaksi], references: [id])
  mainStock TMainStock @relation(fields: [kd_brgdg], references: [kd_brgdg])
  promos    Promo[]    @relation("TransaksiDetailPromos")

  @@map("transaksi_detail")
}

// ============= QUEUE MANAGEMENT =============
model Antrian {
  id_antrian     Int        @id @default(autoincrement())
  id_trans       Int?
  id_pelanggan   Int?
  kd_cab         String
  no_antrian     Int?
  type_trans     String?
  mulai          String?
  selesai        String?
  timer          String?
  status_proses  Int?
  user_mulai     String?
  is_permanent   Boolean    @default(false)
  user_selesai   String?
  tgl_update     DateTime?
  status         String?
  status_antrian Boolean?
  tanggal        DateTime?
  status_racik   Boolean?
  keranjang      Keranjang?

  transaksi Transaksi? @relation(fields: [id_trans], references: [id])
  cabang    MCabang    @relation(fields: [kd_cab], references: [kd_cab])
  pelanggan Pelanggan? @relation(fields: [id_pelanggan], references: [id])

  @@map("antrian")
}

// ============= CUSTOMER & DOCTOR =============
model Pelanggan {
  id         Int      @id @default(autoincrement())
  nama       String?
  alamat     String?
  no_telp    String?
  usia       Int?
  instansi   String?
  korp       String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Transaksi Transaksi[]
  Antrian   Antrian[]

  @@map("pelanggan")
}

model Dokter {
  id           Int      @id @default(autoincrement())
  nama         String?
  alamat       String?
  spesialisasi String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  Transaksi Transaksi[]

  @@map("dokter")
}

// ============= PROMOTION =============
model Promo {
  id               Int       @id @default(autoincrement())
  nama             String
  deskripsi        String?
  diskon           Float
  tanggal_awal     DateTime
  tanggal_akhir    DateTime
  jam_awal_promo   String
  jam_akhir_promo  String
  no_promo         String
  jenis_promo      String
  min_pembelian    Int?
  max_diskon       Float?
  kuantitas_beli   Int?
  kuantitas_gratis Int?
  deleted_at       DateTime?

  tmainstock      TMainStock        @relation("MainStockToPromo", fields: [tmainstockId], references: [kd_brgdg])
  tmainstockId    Int
  TransaksiDetail TransaksiDetail[] @relation("TransaksiDetailPromos")

  @@map("promo")
}

// =====(Payment)====

model Payment {
  id            String      @id @default(uuid())
  transactionId String
  amount        Float
  paymentType   PaymentType
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  cashPayment CashPayment?
  cardPayment CardPayment?

  @@map("payment")
}

model CashPayment {
  id        String @id @default(uuid())
  paymentId String @unique
  amount    Float

  payment Payment @relation(fields: [paymentId], references: [id])

  @@map("cash_payment")
}

model CardPayment {
  id            String   @id @default(uuid())
  paymentId     String   @unique
  amount        Float
  accountNumber String
  bank          String
  edcMachine    String
  cardType      CardType
  cardBrand     String

  payment Payment @relation(fields: [paymentId], references: [id])

  @@map("card_payment")
}

enum PaymentType {
  CASH
  DEBIT
  CREDIT
}

enum CardType {
  DEBIT
  CREDIT
}

model Keranjang {
  id            Int      @id @default(autoincrement())
  id_antrian    Int      @unique
  items         Json // Untuk menyimpan data items dari store
  pelanggan     Json? // Untuk menyimpan data pelanggan
  dokter        Json? // Untuk menyimpan data dokter
  total_harga   Decimal  @db.Decimal(12, 2)
  total_disc    Decimal  @db.Decimal(12, 2)
  total_sc_misc Decimal  @db.Decimal(12, 2)
  total_promo   Decimal  @db.Decimal(12, 2)
  total_up      Decimal  @db.Decimal(12, 2)
  no_voucher    String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  antrian       Antrian  @relation(fields: [id_antrian], references: [id_antrian])

  @@map("keranjang")
}

model MKassa {
  id                 Int     @id @default(autoincrement())
  no_kassa           String  @unique
  mac_address        String
  type_jual          String // 'swalayan' or 'resep'
  status_antrian     String // 'aktif' or 'non_aktif'
  fingerprint        String // 'Y' or 'N'
  default_printer    String?
  status_operasional Boolean @default(true)
  user_operasional   String?
  status             Boolean @default(true)
  kd_cab             String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  cabang MCabang @relation(fields: [kd_cab], references: [kd_cab], onDelete: Cascade)

  // 🔥 **Tambahkan ini untuk membuat relasi dua arah**
  aktifitasKasir TAktifitasKasir[]

  @@map("mkassa")
}

model TAktifitasKasir {
  id              Int       @id @default(autoincrement())
  kode            String    @unique @db.VarChar(50)
  tanggal         DateTime? @db.Date
  tgl_trans       DateTime?
  kd_kasir        Int?
  shift           String?   @db.VarChar(1)
  tanggal_opening DateTime? @db.Date
  jam_opening     DateTime? @db.Time(0)
  tanggal_closing DateTime? @db.Date
  jam_closing     DateTime? @db.Time(0)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  kassa MKassa? @relation(fields: [kd_kasir], references: [id], onDelete: SetNull)

  @@map("taktifitas_kasir")
}
