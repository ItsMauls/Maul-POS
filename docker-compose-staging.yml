# docker-compose.yml
version: '3.8'

services:
  app:
    hostname: frontend-host
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./frontend_v2/Dockerfile.prod
    # volumes:
    #  - ./frontend_v2:/app
    #  - /app/.next
    #  - /app/node_modules
    # ports:
    #  - "3000:3000"
    env_file:
      - ./frontend/.env
    networks:
      - pbf-network

  user-service:
    hostname: user-service-host
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    networks:
      - pbf-network
    restart: on-failure
    volumes:
      - ./user-service/cmd/config.yml:/cmd/config.yml
      - ./user-service/storage/signature:/storage/signature
    environment:
      APP_NAME: "user-rest-service"
      HTTP_PORT: "80"
      DB_DSN: "postgres://apps:obwMHF3sI%3C87@101.255.118.131:5703/db_pbf?sslmode=disable"
      API_AUTH_URL: "http://auth-service-host:80/api/auth"
      API_SECRET_KEY: "APP@SECRET_KEY_SERVICE_PBF2024"
  
  inventory-service:
    hostname: inventory-service-host
    build:
      context: .
      dockerfile: ./inventory-service/Dockerfile
    networks:
      - pbf-network
    restart: on-failure
    volumes:
      - ./inventory-service/cmd/config.yml:/cmd/config.yml
    environment:
      APP_NAME: "inventory-rest-service"
      HTTP_PORT: "80"
      DB_DSN: "postgres://apps:obwMHF3sI%3C87@101.255.118.131:5703/db_pbf?sslmode=disable"
      API_AUTH_URL: "http://auth-service-host:80/api/auth"
      API_SECRET_KEY: "APP@SECRET_KEY_SERVICE_PBF2024"

  auth-service:
    hostname: auth-service-host
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    networks:
      - pbf-network
    restart: on-failure
    volumes:
      - ./auth-service/cmd/config.yml:/cmd/config.yml
    depends_on:
      - redis
    environment:
      APP_NAME: "auth-rest-service"
      HTTP_PORT: "80"
      DB_DSN: "postgres://apps:obwMHF3sI%3C87@101.255.118.131:5703/db_pbf?sslmode=disable"
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ""
      JWT_SECRET_KEY: "JWT_SECRET_KEY_APP_APOTEK_PBF))(**"
      API_SECRET_KEY: "APP@SECRET_KEY_SERVICE_PBF2024"
    
  purchase-service:
    hostname: purchase-service-host
    build:
      context: .
      dockerfile: ./purchase-service/Dockerfile
    networks:
      - pbf-network
    restart: on-failure
    volumes:
      - ./purchase-service/cmd/config.yml:/cmd/config.yml
    environment:
      APP_NAME: "purchase-rest-service"
      HTTP_PORT: "80"
      DB_DSN: "postgres://apps:obwMHF3sI%3C87@101.255.118.131:5703/db_pbf?sslmode=disable"
      API_AUTH_URL: "http://auth-service-host:80/api/auth"
      API_INVENTORY_URL: "http://inventory-service-host:80/api/inventory"
      API_SUPPLIER_URL: "http://supplier-service-host:80/api/supplier"
      API_USER_URL: "http://user-service-host:80/api/user"
      API_SECRET_KEY: "APP@SECRET_KEY_SERVICE_PBF2024"

  supplier-service:
    hostname: supplier-service-host
    build:
      context: .
      dockerfile: ./supplier-service/Dockerfile
    networks:
      - pbf-network
    restart: on-failure
    volumes:
      - ./supplier-service/cmd/config.yml:/cmd/config.yml
    environment:
      APP_NAME: "supplier-rest-service"
      HTTP_PORT: "80"
      DB_DSN: "postgres://apps:obwMHF3sI%3C87@101.255.118.131:5703/db_pbf?sslmode=disable"
      API_AUTH_URL: "http://auth-service-host:80/api/auth"
      API_SECRET_KEY: "APP@SECRET_KEY_SERVICE_PBF2024"

  redis:
    image: redis:latest
    container_name: redis
    volumes:
      - redis-data:/data
    networks:
      - pbf-network

  reverse-proxy:
    build:
      context: .
      dockerfile: ./reverse-proxy/Dockerfile
    restart: on-failure
    volumes:
      - "/run/docker.sock:/run/run/docker.sock:ro"
    networks:
      - pbf-network
      - net
    ports:
      - '8001:80'
    depends_on:
      - app
      - user-service
      - auth-service
      - inventory-service

networks:
  pbf-network:
    external: false
  net:
    external: true

volumes:
  postgres-data:
  redis-data:
