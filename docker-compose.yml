# docker-compose.yml
version: '3.8'

services:
  app:
    hostname: frontend-host
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./frontend_v3/Dockerfile.dev
    volumes:
       - ./frontend_v3:/app
       - /app/.next
       - /app/node_modules
    ports:
      - "3000:3000"
    # env_file:
    #   - ./frontend/.env
    networks:
      - pbf-network

  user-service:
    hostname: user-service-host
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    networks:
      - pbf-network
    restart: on-failure
    volumes:
      - ./user-service/cmd/config.yml:/cmd/config.yml
    depends_on:
      - postgres
    environment:
        APP_NAME: "user-rest-service"
        HTTP_PORT: "8081"
        DB_DSN: "postgres://root:password@postgres:5432/db_user_pbf?sslmode=disable"
        API_AUTH_URL: "http://auth-service-host/api/auth"


  auth-service:
    hostname: auth-service-host
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    networks:
      - pbf-network
    restart: on-failure
    volumes:
      - ./auth-service/cmd/config.yml:/cmd/config.yml
    depends_on:
      - postgres
      - redis
    environment:
        APP_NAME: "auth-rest-service"
        HTTP_PORT: "8081"
        DB_DSN: "postgres://root:password@postgres:5432/db_user_pbf?sslmode=disable"
        REDIS_HOST: "redis"
        REDIS_PORT: "6379"
        REDIS_PASSWORD: ""
        JWT_SECRET_KEY: "JWT_SECRET_KEY_APP_APOTEK_PBF))(**"
  
  sales-service:
    hostname: sales-service-host
    build:
      context: ./sales-service
      dockerfile: ./sales-service/Dockerfile
    networks:
      - pbf-network
    restart: on-failure
    depends_on:
      - postgres
    environment:
      APP_NAME: "sales-rest-service"
      HTTP_PORT: "8082"
      DATABSE_URL: "postgresql://root:password@localhost:5433/db_sales?schema=public"

  postgres:
    image: postgres:latest
    container_name: postgresql
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    volumes:
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d/
      - postgres-data:/var/lib/postgresql/data
    networks:
      - pbf-network

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - pbf-network
      - net

  reverse-proxy:
    build:
      context: .
      dockerfile: ./reverse-proxy/Dockerfile
    restart: on-failure
    volumes:
      - "/run/docker.sock:/run/run/docker.sock:ro"
    networks:
      - pbf-network
      - net
    ports:
      - '8001:80'
    depends_on:
      - app
      - user-service

networks:
    pbf-network:
      external: false
    net:
      external: true

volumes:
    postgres-data:
