version: '3.8'

services:
  frontend:
    hostname: frontend-host
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./apps/frontend_v3/Dockerfile.staging
    environment:
      - NODE_ENV=staging
      - NEXT_PUBLIC_API_URL=http://localhost:8001
    networks:
      - staging-network
    depends_on:
      - database-service

  database-service:
    hostname: database-service-host
    build:
      context: .
      dockerfile: ./apps/database-service/Dockerfile.staging
    networks:
      - staging-network
    restart: on-failure
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/db_apotek
      - NODE_ENV=staging
      - PORT=3004
    depends_on:
      - postgres

  user-service:
    hostname: user-service-host
    build:
      context: .
      dockerfile: ./apps/user-service/Dockerfile.staging
    networks:
      - staging-network
    restart: on-failure
    environment:
      - APP_NAME=user-rest-service
      - PORT=3006
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/db_apotek
      - API_AUTH_URL=http://auth-service-host:3007/api/auth
      - NODE_ENV=staging
      - JWT_SECRET_KEY=your_local_jwt_secret
    depends_on:
      - postgres
      - database-service

  auth-service:
    hostname: auth-service-host
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile.staging
    networks:
      - staging-network
    restart: on-failure
    environment:
      - APP_NAME=auth-rest-service
      - PORT=3007
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/db_apotek
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=your_local_redis_password
      - JWT_SECRET_KEY=your_local_jwt_secret
      - NODE_ENV=staging
      - API_USER_URL=http://user-service-host:3006/api/users
    depends_on:
      - postgres
      - redis
      - user-service
      - database-service

  sales-service:
    hostname: sales-service-host
    build:
      context: .
      dockerfile: ./apps/sales-service/Dockerfile.staging
    networks:
      - staging-network
    restart: on-failure
    environment:
      - PORT=3005
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/db_apotek
      - NODE_ENV=staging
      - API_USER_URL=http://user-service-host:3006/api/users
      - API_AUTH_URL=http://auth-service-host:3007/api/auth
      - JWT_SECRET_KEY=your_local_jwt_secret
    depends_on:
      - postgres
      - user-service
      - database-service

  postgres:
    image: postgres:latest
    container_name: postgresql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: db_apotek
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - staging-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "8001:80"
    volumes:
      - ./infra/reverse-proxy/nginx/staging-local.conf:/etc/nginx/conf.d/default.conf
    networks:
      - staging-network
    depends_on:
      - frontend
      - user-service
      - auth-service
      - sales-service

networks:
  staging-network:
    driver: bridge

volumes:
  postgres-data: 